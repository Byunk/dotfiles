m3u8convert () {
  # Initialize variables with default values
  local output_file=""
  local temp_dir="/tmp/m3u8convert_$$"
  local input_file=""

  # Function to display usage information
  usage() {
    cat <<EOF
Usage: m3u8convert [OPTIONS] input_file

Convert M3U8 playlist to MP4 video.

Required:
  input_file              Input M3U8 file path

Options:
  -o, --output FILE      Set output filename (default: input filename with .mp4 extension)
  -h, --help            Display this help message and exit

Example:
  m3u8convert -o output.mp4 input.m3u8
EOF
  }

  # Function to handle cleanup on exit
  cleanup() {
    if [[ -d "$temp_dir" ]]; then
      rm -rf "$temp_dir"
    fi
    if [[ -f "segments.txt" ]]; then
      rm -f "segments.txt"
    fi
  }

  # Set trap for cleanup
  trap cleanup EXIT

  # Parse command line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -o|--output)
        if [[ -n "$2" ]]; then
          output_file="$2"
          shift 2
        else
          echo "Error: -o|--output requires an argument"
          return 1
        fi
        ;;
      -h|--help)
        usage
        return 0
        ;;
      -*)
        echo "Error: Unknown option $1"
        usage
        return 1
        ;;
      *)
        if [[ -z "$input_file" ]]; then
          input_file="$1"
          shift
        else
          echo "Error: Unexpected argument $1"
          usage
          return 1
        fi
        ;;
    esac
  done

  # Validate required input file
  if [[ -z "$input_file" ]]; then
    echo "Error: Input file is required"
    usage
    return 1
  fi

  if [[ ! -f "$input_file" ]]; then
    echo "Error: Input file '$input_file' does not exist"
    return 1
  fi

  # Set default output filename if not specified
  if [[ -z "$output_file" ]]; then
    output_file="${input_file:r}.mp4"
  fi

  # Create temporary directory
  mkdir -p "$temp_dir"

  # Check if required commands exist
  for cmd in wget ffmpeg grep cut; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      echo "Error: Required command '$cmd' not found"
      return 1
    fi
  done

  # Extract URLs and download segments
  echo "Downloading segments..."
  if ! grep -E '^https?://' "$input_file" | while read -r url; do
    segment_name=$(basename "$url" | cut -d'?' -f1)
    if ! wget -q "$url" -O "$temp_dir/$segment_name"; then
      echo "Error: Failed to download segment: $url"
      return 1
    fi
    echo "file '$temp_dir/$segment_name'" >>segments.txt
    echo "Downloaded: $segment_name"
  done; then
    echo "Error: Failed to process segments"
    return 1
  fi

  # Check if any segments were downloaded
  if [[ ! -s segments.txt ]]; then
    echo "Error: No valid segments found in the input file"
    return 1
  fi

  # Concatenate using ffmpeg
  echo "Concatenating segments..."
  if ! ffmpeg -f concat -safe 0 -i segments.txt -c copy "$output_file" -loglevel error; then
    echo "Error: Failed to concatenate segments"
    return 1
  fi

  echo "Successfully created: $output_file"
}

